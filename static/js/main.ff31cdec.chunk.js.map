{"version":3,"sources":["components/AppName.js","helpers/idmaker.js","components/TaskForm.js","helpers/dateChecker.js","components/Task.js","components/TaskList.js","containers/ToDoContainer.js","App.js","serviceWorker.js","state/store.js","state/combinedReducer.js","index.js"],"names":["styles","color","marginTop","position","AppName","react","data-testid","style","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","button","fontSize","cursor","textDecoration","background","paddingBottom","border","header","display","flexDirection","justifyContent","TaskForm","dispatch","useDispatch","_React$useState","React","_React$useState2","Object","slicedToArray","shows","setShow","_React$useState3","_React$useState4","createClicked","setCreateClicked","_React$useState5","_React$useState6","taskIsEmpty","setTaskIsEmpty","_React$useState7","_React$useState8","dateIsEmpty","setDateIsEmpty","handleClose","taskText","taskDate","onClick","Modal","show","onHide","Header","closeButton","Title","Body","Form_default","a","Group","Label","Control","type","ref","node","Footer","Button","variant","value","task","id","completed","deadlineDate","startDate","concat","Date","getFullYear","getMonth","getDate","getHours","getMinutes","checkDate","endsDate","time","sign","abs","days","hours","minutes","Task","_ref","h4","wordWrap","fontWeight","marginBottom","li","padding","p","pTimeout","pDeadline","divRow","marginRight","taskDispatch","doneDate","TaskList","tasks","className","map","components_Task","key","ToDoContainer","todos","useSelector","state","activeTasks","filter","document","title","Col","components_TaskForm","components_TaskList","App","react_default","createElement","Container","Row","containers_ToDoContainer","Boolean","window","location","hostname","match","date","toDoFromStorage","JSON","parse","localStorage","getItem","store","createStore","action","newState","toConsumableArray","setItem","stringify","assign","arrayWithRemovedItem","objectSpread","itemsToChange","el","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff31cdec.chunk.js","sourcesContent":["import * as React from  'react'\n\nconst styles = {\n    color: '#FAFAFA',\n    marginTop: '2rem',\n    position: 'relative',\n}\n\nexport default function AppName() {\n    return (\n        <h1 data-testid=\"app-header\" style={styles}>ToDo App</h1>\n    )\n}","export function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n","import * as React from 'react'\nimport { Modal, Button } from 'react-bootstrap'\nimport Form from \"react-bootstrap/Form\";\nimport { useDispatch } from \"react-redux\";\nimport { makeid } from '../helpers/idmaker'\n\nconst styles = {\n    button: {\n        color: 'white',\n        fontSize: '24px',\n        cursor: 'pointer',\n        marginTop: '2rem',\n        textDecoration: 'underline',\n        background: 'transparent',\n        paddingBottom: '1rem',\n        border: 'none'\n    },\n    header: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n}\n\nconst TaskForm = () => {\n\n    const dispatch = useDispatch()\n    const [shows, setShow] = React.useState(false)\n    const [createClicked, setCreateClicked] = React.useState(false)\n    const [taskIsEmpty, setTaskIsEmpty] = React.useState(false)\n    const [dateIsEmpty, setDateIsEmpty] = React.useState(false)\n\n\n    const handleClose = () =>{\n        setShow(false)\n    }\n\n    const handleShow = () => {\n        setShow(true)\n    }\n\n    let taskText = '';\n    let taskDate = '';\n\n    const handleCloseAndAddTask = () =>{\n        if(taskText.value !== '' && taskDate.value !== '') {\n            const task = {\n                id: makeid(10),\n                task: taskText.value,\n                completed: false,\n                deadlineDate: taskDate.value,\n                startDate: `${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDate()+1 } ${new Date().getHours()}:${new Date().getMinutes()}`\n            }\n            dispatch({type: 'ADD_TASK', task})\n            if(createClicked === true && (taskText.value !== '' || taskDate.value !== '')) {\n                setCreateClicked(false)\n            }\n            setDateIsEmpty(false)\n            setTaskIsEmpty(false)\n            setShow(false)\n        } else {\n            if(taskDate.value === '') {\n                setDateIsEmpty(true)\n            }\n            if(taskText.value === '') {\n                setTaskIsEmpty(true)\n            }\n\n        }\n    }\n\n    return(\n        <>\n        <div>\n            <button data-testid=\"test-show-modal-button\" style={styles.button} onClick={handleShow}>Add task</button>\n        </div>\n        <Modal data-testid=\"test-modal\" show={shows} onHide={handleClose}>\n            <Modal.Header  style={styles.header} closeButton>\n                <Modal.Title>Add Task form</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form data-testid=\"test-form\">\n                    <Form.Group>\n                        <Form.Label data-testid=\"test-task-label\">Task text</Form.Label>\n                        <Form.Control data-testid=\"test-task-input\" type=\"text\" ref={node => { taskText = node }} />\n                        <span data-testid={\"test-task-form-span\"}>{taskIsEmpty && 'Enter text before you add task'}</span>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid=\"test-date-label\">Task Deadline</Form.Label>\n                        <Form.Control data-testid=\"test-date-input\" type=\"date\" ref={node => { taskDate = node}} />\n                        <span data-testid={\"test-date-form-span\"}>{dateIsEmpty && 'Enter date before you add task'}</span>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button data-testid=\"test-cloxe-button\" variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button data-testid=\"test-add-task-button\" variant=\"primary\" onClick={handleCloseAndAddTask}>\n                    Add task\n                </Button>\n            </Modal.Footer>\n        </Modal>\n        </>\n    )\n}\n\nexport default TaskForm","export const checkDate = (startDate, endsDate, type) => {\n\n    let time = new Date(endsDate) - new Date(startDate)\n    const sign = time < 0 ? 'before' : 'after'\n    time = Math.abs(time)\n    const days = Math.floor(time / 86400000)\n    time %= 86400000\n    const hours  = Math.floor(time / 3600000)\n    time %= 3600000\n    const minutes = Math.floor(time / 60000)\n\n    if(type === 'DEADLINE') {\n        if(sign === 'before') {\n            return `You have ${days} days, ${hours} hours and ${minutes} minutes for finish this task`\n        } else {\n            return `You are late! The deadline is up ${days} days, ${hours} hours and ${minutes} minutes ago`\n        }\n\n    } else if (type === 'FINISHED') {\n        return `You have finished task ${days} days, ${hours} hours and ${minutes} minutes ${sign} the deadline`\n    }\n}","import * as React from 'react'\nimport { Button } from 'react-bootstrap'\nimport {useDispatch} from \"react-redux\";\nimport {checkDate} from '../helpers/dateChecker'\n\nconst Task = ({task}) => {\n\n    const styles = {\n        h4: {\n            color: task.completed ? 'green' : 'red',\n            fontSize: '24px',\n            wordWrap: 'break-word',\n            fontWeight: '300',\n            marginBottom: '20px'\n        },\n        li: {\n          border: '1px solid white',\n            padding: '10px'\n        },\n        p: {\n          padding: '5px',\n          color: 'white'\n        },\n        pTimeout: {\n          padding: '5px',\n          color: 'white',\n          fontWeight: '500',\n          fontSize: '18px'\n        },\n        pDeadline: {\n            color: 'pink'\n        },\n        divRow: {\n            color: 'white',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center'\n        },\n        marginRight: {\n          marginRight: '10px'\n        }\n    }\n\n    const taskDispatch = useDispatch()\n    const deleteTask = (id) => {\n        taskDispatch({type: 'DELETE_TASK', id})\n    }\n    const setTaskDone = (id) => {\n        taskDispatch({type:'SET_TASK_DONE', id})\n    }\n\n    return (\n        <li style={styles.li}>\n            <h4 style={styles.h4}>{task.task}</h4>\n            <div style={styles.divRow}>\n                <Button\n                    variant=\"danger\"\n                    onClick={()=>{deleteTask(task.id)}}\n                    style={{marginRight: '5px'}}>\n                    Delete\n                </Button>\n                <Button\n                    variant={task.completed ? \"warning\" :\"success\"}\n                    onClick={()=>{setTaskDone(task.id)}}>\n                  {task.completed ? 'Restore' : 'Done'}\n                </Button>\n            </div>\n            <p style={styles.p}>To do: {task.completed ? 'No' : 'Yes'}</p>\n            <p style={styles.pTimeout}>DEADLINE: {task.deadlineDate}</p>\n            <p style={styles.pDeadline} data-testid=\"test-deadline-paragraph\">{!task.completed ? checkDate(task.deadlineDate, task.startDate, 'DEADLINE') : checkDate(task.deadlineDate, task.doneDate, 'FINISHED') }</p>\n            <p style={styles.p}>Created at: {task.startDate} {task.doneDate ? ' | Done at ' + task.doneDate : null}</p>\n        </li>\n    )\n}\n\nexport default Task","import * as React from 'react'\nimport Task from './Task'\nimport '../App.css'\n\n\nconst TaskList = ({tasks}) => {\n    return (\n        <ul  id='tasks-list' data-testid=\"test-task-list\" className='task-list' >\n            {tasks.map(task => (\n               <Task task={task} key={task.id}/>\n            ))}\n        </ul>\n    )\n}\nexport default TaskList","import * as React from 'react'\nimport TaskForm from '../components/TaskForm'\nimport TaskList from '../components/TaskList'\nimport {Col} from \"react-bootstrap\";\nimport {useSelector} from \"react-redux\";\n\nconst ToDoContainer = () => {\n\n    let todos = useSelector((state)=>{\n        return state.todos\n    })\n\n    // Setting page title in browser\n    React.useEffect(()=>{\n        const activeTasks = todos.filter(task => {\n            return task.completed === false\n        })\n        if(activeTasks.length > 5) {\n            document.title = `Hurry up! You have ${activeTasks.length} active tasks!`\n        } else {\n            document.title = `Your task menager`\n        }\n    })\n\n    return (\n        <Col>\n            <TaskForm />\n            {todos.length > 0 ? <TaskList tasks={todos} /> : null}\n        </Col>\n    )\n}\n\n\nexport default ToDoContainer","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport AppName from './components/AppName'\nimport ToDoContainer from './containers/ToDoContainer'\n\n\nexport function App() {\n  return (\n          <div data-testid=\"app-container\" className=\"App\">\n              <Container >\n                  <Row>\n                      <Col>\n                          <AppName />\n                      </Col>\n                  </Row>\n                  <Row>\n                      <ToDoContainer/>\n                  </Row>\n              </Container>\n          </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from \"redux\";\nimport { combinedReducer } from './combinedReducer'\nimport { makeid } from '../helpers/idmaker'\n\n\n\nconst date = new Date()\n\nconst toDoFromStorage = JSON.parse(localStorage.getItem('todos'))\n\nconst todos = toDoFromStorage ? toDoFromStorage : [\n    {\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`,\n    },{\n        id: makeid(10),\n        task: 'Do something with php',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },\n    {\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },{\n        id: makeid(10),\n        task: 'Do something with php',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },{\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },{\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },{\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    },{\n        id: makeid(10),\n        task: 'Do something with hooks and redux',\n        completed: false,\n        deadlineDate: '2019-05-25',\n        startDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n    }\n]\n\n\n\nconst store = createStore(combinedReducer, {\n    todos: todos}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\n\nexport default store","export const combinedReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_TASK':\n\n            const newState =\n                [\n                    action.task,\n                    ...state.todos\n                ]\n          localStorage.setItem('todos', JSON.stringify(newState))\n\n\n            return Object.assign({}, state, {\n                todos: [\n                    action.task,\n                    ...state.todos\n                ]\n            })\n        case 'DELETE_TASK':\n            const arrayWithRemovedItem = state.todos.filter(task => {\n                return task.id !== action.id\n            })\n            const todos = {\n                todos: arrayWithRemovedItem\n            }\n            localStorage.setItem('todos', JSON.stringify(arrayWithRemovedItem))\n            return {\n                ...state,\n                ...todos\n            }\n        case 'SET_TASK_DONE':\n            let itemsToChange = state.todos.map(el => {\n                if(el.id === action.id) {\n                    const date = new Date()\n                    return {\n                        ...el,\n                        completed: !el.completed,\n                        doneDate: `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()+1} ${date.getHours()}:${date.getMinutes()}`\n                    }\n                }\n                return el\n                })\n                localStorage.setItem('todos', JSON.stringify(itemsToChange))\n                return {\n                    ...state,\n                    todos: itemsToChange\n                }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./state/store\";\nimport {Provider} from \"react-redux\";\n\n export default ReactDOM.render(\n     <Provider store={store}>\n        <App />\n     </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}